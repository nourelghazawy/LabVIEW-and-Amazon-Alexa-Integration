import boto3
#put your access key, secret, region queue ARN, Queue Name
access_key = ""
access_secret = ""
region =""
queue_url = ""
sqs = boto3.resource('sqs')
queue = sqs.get_queue_by_name(QueueName='')

def build_speechlet_response(title, output, reprompt_text, should_end_session):
    return {
        'outputSpeech': {
            'type': 'PlainText',
            'text': output
        },
        'card': {
            'type': 'Simple',
            'title': "SessionSpeechlet - " + title,
            'content': "SessionSpeechlet - " + output
        },
        'reprompt': {
            'outputSpeech': {
                'type': 'PlainText',
                'text': reprompt_text
            }
        },
        'shouldEndSession': should_end_session
    }

def build_response(session_attributes, speechlet_response):
    return {
        'version': '1.0',
        'sessionAttributes': session_attributes,
        'response': speechlet_response
    }


def get_welcome_response():
    """ 
    The message which will be said when the the project is opened
    """
    session_attributes = {}
    card_title = ""
    speech_output = "Hi Everyone I am Amazon Alexa and I will communicate with a robot hand controlled by my RIO and Lab view"
    
    #you can add text if no commands were saud and it timed out
    reprompt_text = ""
    
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))
        

def get_robot_finger_percentage_response():
    """ 
    Function for handling the robotfingerpercentage intent, this function can control the percentge of one finger on the hand
    """
    session_attributes = {}
    card_title = "robot finger"
    speech_output = "Yeah sure, The finger will move now"
    reprompt_text = ""
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))
        
def get_robot_finger_state_response():
    """ 
    This function handles the robotfingerstate intent. it can fully close or open one finger on the hand. 
    """
    session_attributes = {}
    card_title = "robot finger"
    speech_output = "Yeah sure, The finger will move now"
    reprompt_text = ""
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))
    
def get_robot_all_fingers_response():
    """ 
    This function handles the moveall intent, it can display shapes on the hand. it controls all fingers at the same time
    """
    session_attributes = {}
    card_title = "robot finger"
    speech_output = "Yeah sure, the hand will change it's shape now"
    reprompt_text = ""
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))
        
        
def get_robot_shapenumber_response():
    """ 
    This function handles the shapenumber intent. it can make the hand display a number for example number one. 
    """
    session_attributes = {}
    card_title = "robot finger"
    speech_output = "Yeah sure, the hand will display the number now"
    reprompt_text = ""
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def get_robot_patternnumber_response():
    """ 
    This function handles the patternnumber intent. it displays a sequence of numbers on the hand
    """
    session_attributes = {}
    card_title = "robot finger"
    speech_output = "Yeah sure, the hand will display the pattern now"
    reprompt_text = ""
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def get_robot_shapeletter_response():
    """ 
    This function handles the shapeletter intent. it displays a letter on the hand.
    """
    session_attributes = {}
    card_title = "robot finger"
    speech_output = "Yeah sure, the hand will display the letter now"
    reprompt_text = ""
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))
        
def get_robot_pattern_word_response():
    """ 
    This function handles the patternword intent. it displays a sequence of letters on the hand
    """
    session_attributes = {}
    card_title = "robot finger"
    speech_output = "Yeah sure, the hand will display the word now"
    reprompt_text = ""
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))
        

def handle_session_end_request():
    card_title = "Session Ended"
    speech_output = "Bye everone"
                    
    # Setting this to true ends the session and exits the skill.
    should_end_session = True
    return build_response({}, build_speechlet_response(
        card_title, speech_output, None, should_end_session))

# --------------- Events ------------------

def on_session_started(session_started_request, session):
    """ Called when the session starts.
        One possible use of this function is to initialize specific 
        variables from a previous state stored in an external database
    """
    # Add additional code here as needed
    pass

    

def on_launch(launch_request, session):
    """ Called when the user launches the skill without specifying what they
    want
    """
    # Dispatch to your skill's launch message
    return get_welcome_response()


def on_intent(intent_request, session):
    """ Called when the user specifies an intent for this skill """

    intent = intent_request['intent']
    intent_name = intent_request['intent']['name']

    # Based on which intent triggered the function we will encode a message for LabVIEW that can be translated into motion on the hand 
   

    if  intent_name == "robotfingerpercentage":
        queue.send_message(MessageBody= 'onefingpercentage,' + intent['slots']['state']['value']  + ',finger,' + intent['slots']['number']['value'] + ',position,' + intent['slots']['position']['value'])
        return get_robot_finger_percentage_response()
    elif intent_name == "robotfingerstate":
        queue.send_message(MessageBody= 'onefingerstate,' + intent['slots']['state']['value']  + ',finger,' + intent['slots']['number']['value'] )
        return get_robot_finger_state_response()
    elif intent_name == "moveall":
        queue.send_message(MessageBody= 'allfingers,' + intent['slots']['emotion']['value'] )
        return get_robot_all_fingers_response()
    elif intent_name == "shapenumber":
        queue.send_message(MessageBody= 'allfingers,' + intent['slots']['number']['value'] )
        return get_robot_shapenumber_response()
    elif intent_name == "patternnumber":
        queue.send_message(MessageBody= 'pattern,' + intent['slots']['numberone']['value'] + ',' + intent['slots']['numbertwo']['value'] + ',' + intent['slots']['numberthree']['value'] )
        return get_robot_patternnumber_response()
    elif intent_name == "shapeletter":
        queue.send_message(MessageBody= 'allfingers,' + intent['slots']['letter']['value'] )
        return get_robot_shapeletter_response()
    elif intent_name == "patternword":
        queue.send_message(MessageBody= 'pattern,w,e,b') 
        return get_robot_pattern_word_response()
    elif intent_name == "AMAZON.HelpIntent":
        return get_welcome_response()
    elif intent_name == "AMAZON.CancelIntent" or intent_name == "AMAZON.StopIntent":
        return handle_session_end_request()
    else:
        raise ValueError("Invalid intent")


def on_session_ended(session_ended_request, session):
    """ Called when the user ends the session.
    Is not called when the skill returns should_end_session=true
    """
    print("on_session_ended requestId=" + session_ended_request['requestId'] +
          ", sessionId=" + session['sessionId'])
    # add cleanup logic here


# --------------- Main handler ------------------

def lambda_handler(event, context):
    """ Route the incoming request based on type (LaunchRequest, IntentRequest,
    etc.) The JSON body of the request is provided in the event parameter.
    """
    print("Incoming request...")

    """
    Uncomment this if statement and populate with your skill's application ID to
    prevent someone else from configuring a skill that sends requests to this
    function.
    """
    # if (event['session']['application']['applicationId'] !=
    #         "amzn1.echo-sdk-ams.app.[unique-value-here]"):
    #     raise ValueError("Invalid Application ID")

    
    if event['session']['new']:
        on_session_started({'requestId': event['request']['requestId']},
                           event['session'])

    if event['request']['type'] == "LaunchRequest":
        return on_launch(event['request'], event['session'])
    elif event['request']['type'] == "IntentRequest":
        return on_intent(event['request'], event['session'])
    elif event['request']['type'] == "SessionEndedRequest":
        return on_session_ended(event['request'], event['session'])
